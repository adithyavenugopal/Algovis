[{"D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\layout.js":"1","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\uxcomponents\\slider\\slider.jsx":"2","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\index.js":"3","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\sort.jsx":"4","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\SortingAlgorithms\\selectionsort.jsx":"5","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\SortingAlgorithms\\mergesort.jsx":"6","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\SortingAlgorithms\\bubblesort.jsx":"7"},{"size":2666,"mtime":1607337179175,"results":"8","hashOfConfig":"9"},{"size":1006,"mtime":1607219069240,"results":"10","hashOfConfig":"9"},{"size":185,"mtime":1606870887776,"results":"11","hashOfConfig":"9"},{"size":5648,"mtime":1607343231619,"results":"12","hashOfConfig":"9"},{"size":3067,"mtime":1607332342966,"results":"13","hashOfConfig":"9"},{"size":2828,"mtime":1607343301437,"results":"14","hashOfConfig":"9"},{"size":3142,"mtime":1607330376658,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wo9p24",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\layout.js",[],"D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\uxcomponents\\slider\\slider.jsx",[],"D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\index.js",[],"D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\sort.jsx",["32","33"],"import React, {useState, useEffect} from \"react\";\r\nimport \"../uxcomponents/uxstyles.css\";\r\nimport {Slider} from \"../uxcomponents/slider/slider.jsx\"\r\n\r\n\r\nvar simGap = 1000;\r\nvar array = [];\r\nvar displayVal = true;\r\n\r\nconst max_height = 400;\r\nconst colors = {\r\n    normal_bar : \"#263238\",\r\n    selected_bar : \"#EF6C00\",\r\n    wrong_order_bar : \"#B71C1C\",\r\n    correct_bar : \"#43A047\",\r\n    final_bar : \"#01579B\"\r\n}\r\n\r\n\r\nexport default function Sort(props){\r\n\r\n    const [isEnabled,setIsEnabled] = useState(true);\r\n    const [reset,setReset] = useState(true);\r\n    const [simSpeed,setSimSpeed] = useState(1);\r\n    const [simComps,setSimComps] = useState(10);\r\n    const [arrayList,setArrayList] = useState([]);\r\n    const [trace,setTrace] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if(isEnabled)console.log(\"Sim not running!\");\r\n        else console.log(\"sim running!\");\r\n    },[isEnabled])\r\n\r\n    useEffect(() => {\r\n        switch(simSpeed){\r\n            case \"1\":\r\n            default:\r\n                simGap = 1000;\r\n                break;\r\n            case \"2\":\r\n                simGap = 500;\r\n                break;\r\n            case \"3\":\r\n                simGap = 100;\r\n                break;\r\n            case \"4\":\r\n                simGap = 10;\r\n                break;\r\n            case \"5\":\r\n                simGap = 1;\r\n                break;                \r\n        }\r\n    },[simSpeed]);\r\n\r\n    useEffect(() =>{\r\n        //Find a better implementation to clear all timeouts:\r\n        var killtimer = setTimeout(()=>{\r\n            for(let i = killtimer; i > 0; i--) clearTimeout(i);\r\n            console.log(\"timerid \" + killtimer);\r\n            setIsEnabled(true);\r\n            const temp_array = [];\r\n            for(let i = 0;i<simComps;i++){\r\n                temp_array.push(Math.floor((Math.random() * max_height)+1));\r\n            }\r\n            array = temp_array;\r\n            if(simComps >= 40){\r\n                displayVal = false;\r\n            }\r\n            else{\r\n                displayVal = true;\r\n            }\r\n            setArrayList(array.map((value,idx) => \r\n            <div className = \"arrayComponent\" key = {idx} style = {{height: value/4+\"%\", width: (100/array.length)+\"%\"}}>{displayVal ? value : \"\"}</div>));\r\n            cleanup();\r\n        },10);\r\n        //-----------------------------------------------------//\r\n\r\n    },[props])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setIsEnabled(true);\r\n        const temp_array = [];\r\n        for(let i = 0;i<simComps;i++){\r\n            temp_array.push(Math.floor((Math.random() * max_height)+1));\r\n        }\r\n        array = temp_array;\r\n        if(simComps >= 40){\r\n            displayVal = false;\r\n        }\r\n        else{\r\n            displayVal = true;\r\n        }\r\n        setArrayList(array.map((value,idx) => \r\n        <div className = \"arrayComponent\" key = {idx} style = {{height: value/4+\"%\", width: (100/array.length)+\"%\"}}>{displayVal ? value : \"\"}</div>));\r\n        cleanup();\r\n    },[simComps,reset]);\r\n\r\n\r\n    useEffect(() => {\r\n        props.animations(trace, simGap, displayVal, max_height, colors);\r\n        setTimeout(()=>{\r\n            setIsEnabled(true);\r\n        },(trace.length+1)*simGap);\r\n    },[trace]);\r\n\r\n    const cleanup = () => {\r\n        const arrayComponent_divs = document.getElementsByClassName(\"arrayComponent\");\r\n        for(let i = 0;i< arrayComponent_divs.length;i++){\r\n            arrayComponent_divs[i].style.backgroundColor = colors.normal_bar;\r\n        }\r\n    }\r\n\r\n    const doSort = (array) => {\r\n        if(!isEnabled)return;\r\n        setIsEnabled(false);\r\n        cleanup();\r\n        const temp_trace = props.sortingalgorithm(array);\r\n        setTrace(temp_trace);\r\n    };\r\n\r\n\r\n    return(\r\n        <div className = \"appContainer\">\r\n            <div className = \"appScreenContainer\">\r\n                <div className = \"appScreen\">\r\n                    {arrayList}\r\n                </div>\r\n            </div>\r\n            <div className = \"appMenuContainer\">\r\n                <div className = \"appMenuTextBox\" id = \"config\">\r\n                <div className = \"tag\">Config</div>\r\n                    <p>Speed:</p>\r\n                    <Slider \r\n                    onChange = {(val)=>{setSimSpeed(val)}}\r\n                    isEnabled = {isEnabled}\r\n                    min = \"1\"\r\n                    max = \"5\"\r\n                    step = \"1\"\r\n                    default = \"1\"\r\n                    />\r\n                    <p>Number of Components:</p>\r\n                    <Slider \r\n                    onChange = {(val)=>{setSimComps(val)}}\r\n                    isEnabled = {isEnabled}\r\n                    min = \"10\"\r\n                    max = \"150\"\r\n                    step = \"10\"\r\n                    default = \"10\"\r\n                    />\r\n                </div>\r\n                <div className = \"appMenuBarContainer\">\r\n                    <div className = \"appMenuBar\">\r\n                        <div className = \"appMenuBarItem\" onClick = {isEnabled ? () => {doSort(array)}: console.log(\"disabled!\")}>\r\n                            Start\r\n                        </div>\r\n                        <div className = \"appMenuBarItem\" onClick = {isEnabled ? () => {setReset(!reset)}: console.log(\"disabled\")}>\r\n                            Reset\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className = \"appMenuTextBox\" id = \"info\">\r\n                    <div className = \"tag\">\r\n                        Info.\r\n                    </div>\r\n                    <p>test</p>\r\n                </div>\r\n                \r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\SortingAlgorithms\\selectionsort.jsx",["34"],"import \"../../uxcomponents/uxstyles.css\";\r\n\r\n\r\n\r\nexport function selectionsortanim(trace, simGap, displayVal, max_height, colors){\r\n    const arrayComponent_divs = document.getElementsByClassName(\"arrayComponent\");\r\n    let prev_min = -1;\r\n    for(let i =0; i< trace.length ; i++){\r\n        const [comp1,comp2,tr_case] = trace[i];\r\n        if(tr_case === 1){\r\n        setTimeout(() => {\r\n            arrayComponent_divs[comp1].style.backgroundColor = colors.selected_bar;\r\n        },i*simGap);\r\n        setTimeout(() => {\r\n            arrayComponent_divs[comp1].style.backgroundColor = colors.normal_bar;\r\n            console.log((i+1)*simGap);\r\n        },(i+1)*simGap);\r\n        }\r\n        if(tr_case === 2){\r\n        setTimeout(()=>{\r\n            if(comp2 !== -1){\r\n                arrayComponent_divs[prev_min].style.backgroundColor = colors.normal_bar;\r\n            }\r\n        prev_min = comp1;\r\n        arrayComponent_divs[comp1].style.backgroundColor = colors.correct_bar;\r\n        },(i)*simGap);\r\n        }\r\n\r\n        if(tr_case === 3){\r\n            setTimeout(()=>{\r\n                arrayComponent_divs[comp1].style.backgroundColor = colors.final_bar;\r\n            },i*simGap);\r\n        }\r\n\r\n        if(tr_case === 4){\r\n            const [newheight1,newheight2] = trace[i+1];\r\n            setTimeout(() => {\r\n                arrayComponent_divs[comp1].style.backgroundColor = colors.final_bar;\r\n                arrayComponent_divs[comp2].style.backgroundColor = colors.final_bar;\r\n            },i*simGap);\r\n\r\n            setTimeout(() => {\r\n                arrayComponent_divs[comp1].style.height = newheight1*100/max_height+\"%\";\r\n                arrayComponent_divs[comp2].style.height = newheight2*100/max_height+\"%\";\r\n                if(displayVal){\r\n                arrayComponent_divs[comp1].innerHTML = newheight1;\r\n                arrayComponent_divs[comp2].innerHTML = newheight2;\r\n                };\r\n            },(i+1)*simGap);\r\n            if(comp1 !== comp2){\r\n            setTimeout(() => {\r\n                arrayComponent_divs[comp1].style.backgroundColor = colors.normal_bar;\r\n                arrayComponent_divs[comp2].style.backgroundColor = colors.final_bar;\r\n            },(i+2)*simGap);\r\n            }\r\n            prev_min = -1;\r\n            i = i+1;\r\n        }\r\n    }\r\n}\r\n\r\nexport function selectionsortalgorithm(array){\r\n    const temp_trace = [];\r\n    for(let i = 0; i< array.length-1; i++){\r\n        let min_idx = i;\r\n        temp_trace.push([i,i,1]);\r\n        temp_trace.push([min_idx,-1,2]);\r\n        for(let j = i+1;j<array.length;j++){\r\n            temp_trace.push([j,j,1]);\r\n            if(array[min_idx] > array[j]){\r\n                min_idx = j;\r\n                temp_trace.push([min_idx,min_idx,2]);               \r\n            }\r\n        }\r\n        let temp = array[min_idx];\r\n        array[min_idx] = array[i];\r\n        array[i] = temp;\r\n        temp_trace.push([min_idx,i,4]);\r\n        temp_trace.push([array[min_idx],array[i],4]);\r\n    }\r\n    temp_trace.push([array.length-1,array.length-1,3]);\r\n    return temp_trace;\r\n}","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\SortingAlgorithms\\mergesort.jsx",[],"D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\SortingAlgorithms\\bubblesort.jsx",[],{"ruleId":"35","severity":1,"message":"36","line":78,"column":7,"nodeType":"37","endLine":78,"endColumn":14,"suggestions":"38"},{"ruleId":"35","severity":1,"message":"39","line":106,"column":7,"nodeType":"37","endLine":106,"endColumn":14,"suggestions":"40"},{"ruleId":"41","severity":1,"message":"42","line":20,"column":20,"nodeType":"43","messageId":"44","endLine":26,"endColumn":10},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'simComps'. Either include it or remove the dependency array.","ArrayExpression",["45"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["46"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'prev_min', 'prev_min'.","ArrowFunctionExpression","unsafeRefs",{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},"Update the dependencies array to be: [props, simComps]",{"range":"51","text":"52"},"Update the dependencies array to be: [props, trace]",{"range":"53","text":"54"},[2366,2373],"[props, simComps]",[3201,3208],"[props, trace]"]