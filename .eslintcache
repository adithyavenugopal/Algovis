[{"D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\SelectionSort\\selectionsort.jsx":"1","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\layout.js":"2","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\BubbleSort\\bubblesort.jsx":"3"},{"size":8053,"mtime":1607227532213,"results":"4","hashOfConfig":"5"},{"size":2091,"mtime":1607228164997,"results":"6","hashOfConfig":"5"},{"size":7915,"mtime":1607227885218,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"wo9p24",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\SelectionSort\\selectionsort.jsx",["16","17","18","19","20"],"import React, {Component, useState, useEffect} from \"react\";\r\nimport \"../../uxcomponents/uxstyles.css\";\r\nimport {Slider} from \"../../uxcomponents/slider/slider.jsx\"\r\nimport \"./selectionsort.css\"\r\n\r\nconst max_height = 400;\r\nvar simGap = 1000;\r\nconst normal_bar = \"#263238\";\r\nconst selected_bar = \"#37474F\";\r\n//const wrong_order_bar = \"#B71C1C\";\r\nconst correct_bar = \"#43A047\";\r\nconst final_bar = \"#01579B\";\r\n\r\nexport default function SelectionSort(props){\r\n\r\n    const [isEnabled,setIsEnabled] = useState(true);\r\n    const [displayVal,setDisplayVal] = useState(true);\r\n    const [reset,setReset] = useState(true);\r\n    const [simSpeed,setSimSpeed] = useState(1);\r\n    const [simComps,setSimComps] = useState(10);\r\n    const [array, setArray] = useState([]);\r\n    const [arrayList,setArrayList] = useState([]);\r\n    const [trace,setTrace] = useState([]);\r\n\r\n\r\n    \r\n\r\n\r\n    useEffect(() => {\r\n        if(isEnabled)console.log(\"Sim not running!\");\r\n        else console.log(\"sim running!\");\r\n    },[isEnabled])\r\n\r\n    useEffect(() => {\r\n        switch(simSpeed){\r\n            case \"1\":\r\n            default:\r\n                simGap = 1000;\r\n                break;\r\n            case \"2\":\r\n                simGap = 500;\r\n                break;\r\n            case \"3\":\r\n                simGap = 100;\r\n                break;\r\n            case \"4\":\r\n                simGap = 10;\r\n                break;\r\n            case \"5\":\r\n                simGap = 1;\r\n                break;                \r\n        }\r\n        console.log(simGap);\r\n    },[simSpeed]);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(simComps);\r\n        const temp_array = [];\r\n        for(let i = 0;i<simComps;i++){\r\n            temp_array.push(Math.floor((Math.random() * max_height)+1));\r\n        }\r\n        setArray(temp_array);\r\n        if(simComps >= 40){\r\n            setDisplayVal(false);\r\n        }\r\n        else{\r\n            setDisplayVal(true);\r\n        }\r\n    },[simComps,reset]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setArrayList(array.map((value,idx) => \r\n        <div className = \"arrayComponent\" key = {idx} style = {{height: value/4+\"%\", width: (100/array.length)+\"%\"}}>{displayVal ? value : \"\"}</div>));\r\n        const arrayComponent_divs = document.getElementsByClassName(\"arrayComponent\");\r\n        cleanup();\r\n    },[array,displayVal]);\r\n\r\n\r\n    useEffect(() => {\r\n        const arrayComponent_divs = document.getElementsByClassName(\"arrayComponent\");\r\n        let prev_min = -1;\r\n        for(let i =0; i< trace.length ; i++){\r\n            const [comp1,comp2,tr_case] = trace[i];\r\n            if(tr_case === 1){\r\n            setTimeout(() => {\r\n                arrayComponent_divs[comp1].style.backgroundColor = selected_bar;\r\n            },i*simGap)\r\n            setTimeout(() => {\r\n                arrayComponent_divs[comp1].style.backgroundColor = normal_bar;\r\n                console.log((i+1)*simGap);\r\n            },(i+1)*simGap)\r\n            }\r\n            if(tr_case === 2){\r\n            setTimeout(()=>{\r\n                if(comp2 !== -1){\r\n                    arrayComponent_divs[prev_min].style.backgroundColor = normal_bar;\r\n                }\r\n            prev_min = comp1;\r\n            arrayComponent_divs[comp1].style.backgroundColor = correct_bar;\r\n            },(i)*simGap);\r\n            }\r\n\r\n            if(tr_case === 3){\r\n                setTimeout(()=>{\r\n                    arrayComponent_divs[comp1].style.backgroundColor = final_bar;\r\n                },i*simGap);\r\n            }\r\n\r\n            if(tr_case === 4){\r\n                const [newheight1,newheight2] = trace[i+1];\r\n                setTimeout(() => {\r\n                    arrayComponent_divs[comp1].style.backgroundColor = final_bar;\r\n                    arrayComponent_divs[comp2].style.backgroundColor = final_bar;\r\n                },i*simGap);\r\n\r\n                setTimeout(() => {\r\n                    arrayComponent_divs[comp1].style.height = newheight1/4+\"%\";\r\n                    arrayComponent_divs[comp2].style.height = newheight2/4+\"%\";\r\n                    if(displayVal){\r\n                    arrayComponent_divs[comp1].innerHTML = newheight1;\r\n                    arrayComponent_divs[comp2].innerHTML = newheight2;\r\n                    }\r\n                },(i+1)*simGap);\r\n                if(comp1 !== comp2){\r\n                setTimeout(() => {\r\n                    arrayComponent_divs[comp1].style.backgroundColor = normal_bar;\r\n                    arrayComponent_divs[comp2].style.backgroundColor = final_bar;\r\n                },(i+2)*simGap);\r\n                console.log(\"reset!:\"+comp1+\" \"+comp2);\r\n                }\r\n                prev_min = -1;\r\n                console.log(\"resetting prev_min!\"+prev_min);\r\n                i = i+1;\r\n            }\r\n        }\r\n        setTimeout(()=>{\r\n            setIsEnabled(true);\r\n        },(trace.length+1)*simGap);\r\n    },[trace]);\r\n\r\n    const cleanup = () => {\r\n        const arrayComponent_divs = document.getElementsByClassName(\"arrayComponent\");\r\n        for(let i = 0;i< arrayComponent_divs.length;i++){\r\n            arrayComponent_divs[i].style.backgroundColor = \"#263238\";\r\n        }\r\n    }\r\n    const doSelectionSort = (array) => {\r\n        cleanup();\r\n        if(!isEnabled)return;\r\n        setIsEnabled(false);\r\n        const temp_trace = [];\r\n        for(let i = 0; i< array.length-1; i++){\r\n            let min_idx = i;\r\n            temp_trace.push([i,i,1]);\r\n            temp_trace.push([min_idx,-1,2]);\r\n            for(let j = i+1;j<array.length;j++){\r\n                temp_trace.push([j,j,1]);\r\n                if(array[min_idx] > array[j]){\r\n                    min_idx = j;\r\n                    temp_trace.push([min_idx,min_idx,2]);               \r\n                }\r\n            }\r\n            let temp = array[min_idx];\r\n            array[min_idx] = array[i];\r\n            array[i] = temp;\r\n            temp_trace.push([min_idx,i,4]);\r\n            temp_trace.push([array[min_idx],array[i],4]);\r\n        }\r\n        temp_trace.push([array.length-1,array.length-1,3]);\r\n        console.log(temp_trace.length);\r\n        setTrace(temp_trace);\r\n    };\r\n\r\n\r\n    return(\r\n        <div className = \"appContainer\">\r\n            <div className = \"appScreenContainer\">\r\n                <div className = \"appScreen\">\r\n                    {arrayList};\r\n                </div>\r\n            </div>\r\n            <div className = \"appMenuContainer\">\r\n                <div className = \"appMenuTextBox\" id = \"config\">\r\n                <div className = \"tag\">Config</div>\r\n                    <p>Speed:</p>\r\n                    <Slider \r\n                    onChange = {(val)=>{setSimSpeed(val)}}\r\n                    isEnabled = {isEnabled}\r\n                    min = \"1\"\r\n                    max = \"5\"\r\n                    step = \"1\"\r\n                    default = \"1\"\r\n                    />\r\n                    <p>Number of Components:</p>\r\n                    <Slider \r\n                    onChange = {(val)=>{setSimComps(val)}}\r\n                    isEnabled = {isEnabled}\r\n                    min = \"10\"\r\n                    max = \"100\"\r\n                    step = \"10\"\r\n                    default = \"10\"\r\n                    />\r\n                </div>\r\n                <div className = \"appMenuBarContainer\">\r\n                    <div className = \"appMenuBar\">\r\n                        <div className = \"appMenuBarItem\" onClick = {isEnabled ? () => {doSelectionSort(array)}: console.log(\"disabled!\")}>\r\n                            Start\r\n                        </div>\r\n                        <div className = \"appMenuBarItem\" onClick = {isEnabled ? () => {setReset(!reset)}: console.log(\"disabled\")}>\r\n                            Reset\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className = \"appMenuTextBox\" id = \"info\">\r\n                    <div className = \"tag\">\r\n                        Info.\r\n                    </div>\r\n                    <p>test</p>\r\n                </div>\r\n                \r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}","D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\layout.js",[],"D:\\onedrive-personal\\OneDrive\\Coding\\web-dev\\algovis\\src\\components\\Algorithms\\BubbleSort\\bubblesort.jsx",["21","22","23","24","25"],"import React, {Component, useState, useEffect} from \"react\";\r\nimport \"../../uxcomponents/uxstyles.css\";\r\nimport {Slider} from \"../../uxcomponents/slider/slider.jsx\"\r\nimport \"./bubblesort.css\"\r\n\r\nconst max_height = 400;\r\nvar simGap = 1000;\r\nconst normal_bar = \"#263238\";\r\nconst selected_bar = \"#37474F\";\r\nconst wrong_order_bar = \"#B71C1C\";\r\nconst correct_bar = \"#43A047\";\r\nconst final_bar = \"#01579B\";\r\n\r\nexport default function BubbleSort(props){\r\n\r\n    const [isEnabled,setIsEnabled] = useState(true);\r\n    const [displayVal,setDisplayVal] = useState(true);\r\n    const [reset,setReset] = useState(true);\r\n    const [simSpeed,setSimSpeed] = useState(1);\r\n    const [simComps,setSimComps] = useState(10);\r\n    const [array, setArray] = useState([]);\r\n    const [arrayList,setArrayList] = useState([]);\r\n    const [trace,setTrace] = useState([]);\r\n\r\n \r\n\r\n    useEffect(() => {\r\n        if(isEnabled)console.log(\"Sim not running!\");\r\n        else console.log(\"sim running!\");\r\n    },[isEnabled])\r\n\r\n    useEffect(() => {\r\n        switch(simSpeed){\r\n            case \"1\":\r\n            default:\r\n                simGap = 1000;\r\n                break;\r\n            case \"2\":\r\n                simGap = 500;\r\n                break;\r\n            case \"3\":\r\n                simGap = 100;\r\n                break;\r\n            case \"4\":\r\n                simGap = 10;\r\n                break;\r\n            case \"5\":\r\n                simGap = 1;\r\n                break;                \r\n        }\r\n        console.log(simGap);\r\n    },[simSpeed]);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(simComps);\r\n        const temp_array = [];\r\n        for(let i = 0;i<simComps;i++){\r\n            temp_array.push(Math.floor((Math.random() * max_height)+1));\r\n        }\r\n        setArray(temp_array);\r\n        if(simComps >= 40){\r\n            setDisplayVal(false);\r\n        }\r\n        else{\r\n            setDisplayVal(true);\r\n        }\r\n    },[simComps,reset]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setArrayList(array.map((value,idx) => \r\n        <div className = \"arrayComponent\" key = {idx} style = {{height: value/4+\"%\", width: (100/array.length)+\"%\"}}>{displayVal ? value : \"\"}</div>));\r\n        const arrayComponent_divs = document.getElementsByClassName(\"arrayComponent\");\r\n        cleanup();\r\n    },[array,displayVal]);\r\n\r\n\r\n    useEffect(() => {\r\n        const arrayComponent_divs = document.getElementsByClassName(\"arrayComponent\");\r\n        let prev_min = -1;\r\n        for(let i =0; i< trace.length ; i++){\r\n            const [comp1,comp2,tr_case] = trace[i];\r\n            if(tr_case === 1){\r\n            setTimeout(() => {\r\n                arrayComponent_divs[comp1].style.backgroundColor = selected_bar;\r\n                arrayComponent_divs[comp2].style.backgroundColor = selected_bar;\r\n            },i*simGap)\r\n            setTimeout(() => {\r\n                arrayComponent_divs[comp1].style.backgroundColor = normal_bar;\r\n                arrayComponent_divs[comp2].style.backgroundColor = normal_bar;\r\n                console.log((i+1)*simGap);\r\n            },(i+1)*simGap)\r\n            }\r\n            if(tr_case === 2){\r\n                const [newheight1,newheight2] = trace[i+1];\r\n                setTimeout(() => {\r\n                    arrayComponent_divs[comp1].style.backgroundColor = wrong_order_bar;\r\n                    arrayComponent_divs[comp2].style.backgroundColor = wrong_order_bar;\r\n                },i*simGap);\r\n\r\n                setTimeout(() => {\r\n                    arrayComponent_divs[comp1].style.height = newheight1*100/max_height+\"%\";\r\n                    arrayComponent_divs[comp2].style.height = newheight2*100/max_height+\"%\";\r\n                    if(displayVal){\r\n                        arrayComponent_divs[comp1].innerHTML = newheight1;\r\n                        arrayComponent_divs[comp2].innerHTML = newheight2;\r\n                    };\r\n                },(i+1)*simGap);\r\n                i = i+1;\r\n            }\r\n            if(tr_case === 3){\r\n                setTimeout(() => {\r\n                    arrayComponent_divs[comp1].style.backgroundColor = correct_bar;\r\n                    arrayComponent_divs[comp2].style.backgroundColor = correct_bar;\r\n                },i*simGap);\r\n                setTimeout(() => {\r\n                    arrayComponent_divs[comp1].style.backgroundColor = normal_bar;\r\n                    arrayComponent_divs[comp2].style.backgroundColor = normal_bar;\r\n                },(i+1)*simGap);\r\n            }\r\n            if(tr_case === 4){\r\n                setTimeout(() => {\r\n                    arrayComponent_divs[comp1].style.backgroundColor = final_bar;\r\n                    arrayComponent_divs[comp2].style.backgroundColor = final_bar;\r\n                },i*simGap);\r\n            }\r\n        }\r\n        setTimeout(()=>{\r\n            setIsEnabled(true);\r\n        },(trace.length+1)*simGap);\r\n    },[trace]);\r\n\r\n    const cleanup = () => {\r\n        const arrayComponent_divs = document.getElementsByClassName(\"arrayComponent\");\r\n        for(let i = 0;i< arrayComponent_divs.length;i++){\r\n            arrayComponent_divs[i].style.backgroundColor = \"#263238\";\r\n        }\r\n    }\r\n    const doBubbleSort = (array) => {\r\n        cleanup();\r\n        if(!isEnabled)return;\r\n        setIsEnabled(false);\r\n        const temp_trace = [];\r\n        for(let i = 0; i< array.length; i++){\r\n            for(let j = 0;j<array.length-i-1;j++){\r\n                temp_trace.push([j,j+1,1]);\r\n                if(array[j] > array[j+1]){\r\n                    const temp = array[j+1];\r\n                    array[j+1] = array[j];\r\n                    array[j] = temp;\r\n                    temp_trace.push([j,j+1,2]);\r\n                    temp_trace.push([array[j],array[j+1],2]);\r\n                    temp_trace.push([j,j+1,3]);             \r\n                }\r\n            }\r\n            temp_trace.push([array.length-i-1,array.length-i-1,4]);\r\n        }\r\n        console.log(temp_trace.length);\r\n        setTrace(temp_trace);\r\n    };\r\n\r\n\r\n    return(\r\n        <div className = \"appContainer\">\r\n            <div className = \"appScreenContainer\">\r\n                <div className = \"appScreen\">\r\n                    {arrayList};\r\n                </div>\r\n            </div>\r\n            <div className = \"appMenuContainer\">\r\n                <div className = \"appMenuTextBox\" id = \"config\">\r\n                <div className = \"tag\">Config</div>\r\n                    <p>Speed:</p>\r\n                    <Slider \r\n                    onChange = {(val)=>{setSimSpeed(val)}}\r\n                    isEnabled = {isEnabled}\r\n                    min = \"1\"\r\n                    max = \"5\"\r\n                    step = \"1\"\r\n                    default = \"1\"\r\n                    />\r\n                    <p>Number of Components:</p>\r\n                    <Slider \r\n                    onChange = {(val)=>{setSimComps(val)}}\r\n                    isEnabled = {isEnabled}\r\n                    min = \"10\"\r\n                    max = \"100\"\r\n                    step = \"10\"\r\n                    default = \"10\"\r\n                    />\r\n                </div>\r\n                <div className = \"appMenuBarContainer\">\r\n                    <div className = \"appMenuBar\">\r\n                        <div className = \"appMenuBarItem\" onClick = {isEnabled ? () => {doBubbleSort(array)}: console.log(\"disabled!\")}>\r\n                            Start\r\n                        </div>\r\n                        <div className = \"appMenuBarItem\" onClick = {isEnabled ? () => {setReset(!reset)}: console.log(\"disabled\")}>\r\n                            Reset\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className = \"appMenuTextBox\" id = \"info\">\r\n                    <div className = \"tag\">\r\n                        Info.\r\n                    </div>\r\n                    <p>test</p>\r\n                </div>\r\n                \r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}",{"ruleId":"26","severity":1,"message":"27","line":1,"column":16,"nodeType":"28","messageId":"29","endLine":1,"endColumn":25},{"ruleId":"26","severity":1,"message":"30","line":77,"column":15,"nodeType":"28","messageId":"29","endLine":77,"endColumn":34},{"ruleId":"31","severity":1,"message":"32","line":91,"column":24,"nodeType":"33","messageId":"34","endLine":94,"endColumn":14},{"ruleId":"31","severity":1,"message":"35","line":97,"column":24,"nodeType":"33","messageId":"34","endLine":103,"endColumn":14},{"ruleId":"36","severity":1,"message":"37","line":142,"column":7,"nodeType":"38","endLine":142,"endColumn":14,"suggestions":"39"},{"ruleId":"26","severity":1,"message":"27","line":1,"column":16,"nodeType":"28","messageId":"29","endLine":1,"endColumn":25},{"ruleId":"26","severity":1,"message":"30","line":75,"column":15,"nodeType":"28","messageId":"29","endLine":75,"endColumn":34},{"ruleId":"26","severity":1,"message":"40","line":82,"column":13,"nodeType":"28","messageId":"29","endLine":82,"endColumn":21},{"ruleId":"31","severity":1,"message":"32","line":90,"column":24,"nodeType":"33","messageId":"34","endLine":94,"endColumn":14},{"ruleId":"36","severity":1,"message":"37","line":133,"column":7,"nodeType":"38","endLine":133,"endColumn":14,"suggestions":"41"},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'arrayComponent_divs' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'simGap'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'prev_min', 'prev_min'.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'displayVal'. Either include it or remove the dependency array.","ArrayExpression",["42"],"'prev_min' is assigned a value but never used.",["43"],{"desc":"44","fix":"45"},{"desc":"44","fix":"46"},"Update the dependencies array to be: [displayVal, trace]",{"range":"47","text":"48"},{"range":"49","text":"48"},[4850,4857],"[displayVal, trace]",[4847,4854]]